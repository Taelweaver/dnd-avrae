##Author: Dave Smith 2021
#Ignore comment lines starting with # when copying code
#

###
#Setup Fighter counters. Run this initially, and again every time you level
###

!test <drac2>
if (FighterLevel < 17):
  character().create_cc("Action Surge",0,1,"short","bubble")
else:
  character().create_cc("Action Surge",0,2,"short","bubble")
character().create_cc("Superiority (d6)",0,1,"short","bubble")
if (character().cc_exists("Superiority (d8)")):
  character().delete_cc("Superiority (d8)")
if (character().cc_exists("Superiority (d10)")):
  character().delete_cc("Superiority (d10)")
if (character().cc_exists("Superiority (d12)")):
  character().delete_cc("Superiority (d12)")
if (FighterLevel < 10):
  num_of_dice = 4 if FighterLevel < 7 else 5
  character().set_cvar('superiority_max_die',"d8")
elif (FighterLevel < 18):
  num_of_dice = 5 if FighterLevel < 15 else 6
  character().set_cvar('superiority_max_die',"d10")
else:
  character().set_cvar(superiority_max_die,"d12")
character().create_cc("Superiority ("f'{superiority_max_die}'")",0,num_of_dice,"short","bubble")
character().create_cc("Second Wind",0,1,"short","bubble")
character().create_cc("Hit Dice (d10)",0,FighterLevel,"long","bubble")
</drac2>


###
#Parry:
#
#Usage: !parry -d {the amount of damage you are parrying(required)} -hd {die type to use (optional)}

!alias parry embed
<drac2>
args=argparse(&ARGS&)
damage=int(args.get('d')[0]) if args.get('d') else 0
die_type=args.get('hd')[0] if args.get('hd') else superiority_max_die
damageNull=vroll("1"f'{die_type}'"+"f'{dexterityMod}')
actualDamage=int(damageNull.total) if int(damageNull.total) <= damage else damage
results=""
if ((damage) and (character().get_cc("Superiority ("f'{die_type}'")") > 0)):
  failure = False
  character().set_cc("Superiority ("f'{die_type}'")", character().get_cc("Superiority ("f'{die_type}'")") - 1 )
  results = "-f \"Meta:\"|\"" + str(damageNull.full) + "\" -f \"Damage Nullified:\"|\"" + str(actualDamage) + "\""
  hp_mod=character().hp + actualDamage
  hp_max=character().max_hp
  if (hp_mod > hp_max):
    character().reset_hp()
  else:
    character().set_hp(hp_mod)
else:
  failure = True
  results = "-f \"Failure:\"|\"Out of charges or no Damage specified\""
</drac2>
-title "{{ f'{character().name} uses Superiority to Parry the last attack' if not failure else f'{character().name} fails to intercept the attack'}}"
-desc "When another creature damages you with a melee attack, you can use your reaction and expend one superiority die to reduce the damage by the number you roll on your superiority die + your Dexterity modifier."
{{ results }}
-f "Usage:"|"-d argument is required```!parry -d [damage of last attack] -hd [die type to use (optional)]```"
-f "{{ character().name }} HP:"|"{{ character().hp_str() }}"
-f "{{"Superiority ("f'{die_type}'")"}}|{{'◉'*get_cc("Superiority ("f'{die_type}'")") + '〇'*(get_cc_max("Superiority ("f'{die_type}'")")-get_cc("Superiority ("f'{die_type}'")"))}}"
-footer "Source PHB"


###
#Second Wind:
#
#Usage: !sw

!alias sw embed
<drac2>
args=argparse(&ARGS&)
damageNull=vroll("1d10+"f'{FighterLevel}')
results=""
if (character().get_cc("Second Wind") > 0):
  failure = False
  character().set_cc("Second Wind", character().get_cc("Second Wind") - 1 )
  results = "-f \"Meta:\"|\"" + str(damageNull.full) + "\" -f \"Healing:\"|\"" + str(damageNull.total) + "\""
  hp_mod=character().hp + damageNull.total
  hp_max=character().max_hp
  if (hp_mod > hp_max):
    character().reset_hp()
  else:
    character().set_hp(hp_mod)
else:
  failure = True
  results = "-f \"Failure:\"|\"Out of charges\""
</drac2>
-title "{{ f'{character().name} gets a Second Wind!' if not failure else f'{character().name} tries to muster a Second Wind but is exhausted.'}}"
-desc "You have a limited well of stamina that you can draw on to protect yourself from harm. On your turn, you can use a bonus action to regain hit points equal to 1d10 + your fighter level. Once you use this feature, you must finish a short or long rest before you can use it again."
{{ results }}
-f "Usage:"|"```!sw```"
-f "{{ character().name }} HP:"|"{{ character().hp_str() }}"
-f "{{"Second Wind"}}|{{'◉'*get_cc("Second Wind") + '〇'*(get_cc_max("Second Wind")-get_cc("Second Wind"))}}"
-footer "Source PHB"


###
#Action Surge:
#
#Usage: !as

!alias as embed
<drac2>
if (character().get_cc("Action Surge") > 0):
  failure = False
  character().set_cc("Action Surge", character().get_cc("Action Surge") - 1 )
  results = ""
else:
  failure = True
  results = "-f \"Failure:\"|\"Out of charges\""
</drac2>
-title "{{ f'{character().name} uses Action Surge!' if not failure else f'{character().name} fails to use Action Surge.'}}"
-desc "Starting at 2nd level, you can push yourself beyond your normal limits for a moment. On your turn, you can take one additional action. Once you use this feature, you must finish a short or long rest before you can use it again. Starting at 17th level, you can use it twice before a rest, but only once on the same turn."
{{ results }}
-f "Usage:"|"```!as```"
-f "{{"Action Surge"}}|{{'◉'*get_cc("Action Surge") + '〇'*(get_cc_max("Action Surge")-get_cc("Action Surge"))}}"
-footer "Source PHB"


###
#Evasive Footwork:
#
#Usage: !ef

!alias ef embed 
<drac2>
args=argparse(&ARGS&)
damage=int(args.get('d')[0]) if args.get('d') else 0
die_type=args.get('hd')[0] if args.get('hd') else superiority_max_die
damageNull=vroll("1"f'{die_type}')
results=""
if (character().get_cc("Superiority ("f'{die_type}'")") > 0):
  failure = False
  character().set_cc("Superiority ("f'{die_type}'")", character().get_cc("Superiority ("f'{die_type}'")") - 1 )
  mod_ac = character().ac + damageNull.total
  results= "-f \"Meta:\"|\"" + str(damageNull.full) + "\" -f \"Moving AC:\"|\"" + str(mod_ac) + "\" "
  if (combat()):
    combat().me.add_effect("Evasive Footwork -- "f'{die_type}',f'-ac +{damageNull.total}',1,"","",True,"")   
else:
  results="-f \"Failure:\"|\"Out of charges\""
  failure = True
</drac2>
-title "{{ f'{character().name} uses Evasive Footwork to move through the fray' if not failure else f'{character().name} fails to use Evasive Footwork!'}}"
-desc "When you move, you can expend one superiority die, rolling the die and adding the number rolled to your AC until you stop moving."
{{ results }}
-f "Usage:"|"```!ef -hd [die type] (optional)```"
-f "{{"Superiority ("f'{die_type}'")"}}|{{'◉'*get_cc("Superiority ("f'{die_type}'")") + '〇'*(get_cc_max("Superiority ("f'{die_type}'")")-get_cc("Superiority ("f'{die_type}'")"))}}"

###
###Maneuvers:
###


###
#Bait And Switch
#

!alias bas embed 
<drac2>
args=argparse(&ARGS&)
target=args.get('t')[0] if args.get('t') else character().name
die_type=args.get('hd')[0] if args.get('hd') else superiority_max_die
damageNull=vroll("1"f'{die_type}')
results=""
if (character().get_cc("Superiority ("f'{die_type}'")") > 0):
  failure = False
  character().set_cc("Superiority ("f'{die_type}'")", character().get_cc("Superiority ("f'{die_type}'")") - 1 )
  mod_ac = character().ac + damageNull.total
  if (combat()):
    mod_ac = combat().get_combatant(target).ac + damageNull.total
	target = combat().get_combatant(target).name
	combat().me.add_effect("Bait and Switch -- "f'{target}',"",1,False,"","",f'on {target} until start of next turn')
	combat().get_combatant(target).add_effect("Bait and Switch -- "f'{die_type}',f'-ac +{damageNull.total}',-1,False,combat().me.get_effect("Bait and Switch -- "f'{target}'),"","")
  results= "-f \"Meta:\"|\"" + str(damageNull.full) + "\" -f \"Target:\"|\"" + target + "\" -f \"AC:\"|\"" + str(mod_ac) + "\" "
else:
  results="-f \"Failure:\"|\"Out of charges\""
  failure = True
</drac2>
-title "{{ f'{character().name} baits the enemy and switches places with an ally!' if not failure else f'{character().name} fails to Bait and Switch!'}}"
-desc "When you're within 5 feet of a creature on your turn, you can expend one superiority die and switch places with that creature, provided you spend at least 5 feet of movement and the creature is willing and isn't incapacitated. This movement doesn't provoke opportunity attacks. Roll the superiority die. Until the start of your next turn, you or the other creature (your choice) gains a bonus to AC equal to the number rolled."
{{ results }}
-f "Usage:"|"```!ef -hd [die type] (optional)```"
-f "{{"Superiority ("f'{die_type}'")"}}|{{'◉'*get_cc("Superiority ("f'{die_type}'")") + '〇'*(get_cc_max("Superiority ("f'{die_type}'")")-get_cc("Superiority ("f'{die_type}'")"))}}"


###
#Lunging Attack
#

#Use max sup die
!snippet la {{ failure = False if (character().get_cc("Superiority ("f'{superiority_max_die}'")") > 0) else True}} {{ character().set_cc("Superiority ("f'{superiority_max_die}'")", character().get_cc("Superiority ("f'{superiority_max_die}'")") -1 ) if not failure else ' '}} {{ f'-d 1{superiority_max_die} ' if not failure else ' '}} {{f'-f "Lunging Attack Success:"|"When you make a melee weapon attack on your turn, you can expend one superiority die to increase your reach for that attack by 5 feet. If you hit, you add the superiority die to the attack\'s damage roll."' if not failure else f'-f "Lunging Attack Failure:"|"Out of Charges"' }} -f "{{"Superiority ("f'{superiority_max_die}'")"}}|{{'◉'*get_cc("Superiority ("f'{superiority_max_die}'")") + '〇'*(get_cc_max("Superiority ("f'{superiority_max_die}'")")-get_cc("Superiority ("f'{superiority_max_die}'")"))}}"

#Use d6 sup die
!snippet la6 {{ failure = False if (character().get_cc("Superiority (d6)") > 0) else True}} {{ character().set_cc("Superiority (d6)", character().get_cc("Superiority (d6)") -1 ) if not failure else ' '}} {{ f'-d 1d6 ' if not failure else ' '}} {{f'-f "Lunging Attack Success:"|"When you make a melee weapon attack on your turn, you can expend one superiority die to increase your reach for that attack by 5 feet. If you hit, you add the superiority die to the attack\'s damage roll."' if not failure else f'-f "Lunging Attack Failure:"|"Out of Charges"' }} -f "{{"Superiority (d6)"}}|{{'◉'*get_cc("Superiority (d6)") + '〇'*(get_cc_max("Superiority (d6)")-get_cc("Superiority (d6)"))}}"


###
#Quick Toss
#

#Use max sup die
!snippet qt {{ failure = False if (character().get_cc("Superiority ("f'{superiority_max_die}'")") > 0) else True}} {{ character().set_cc("Superiority ("f'{superiority_max_die}'")", character().get_cc("Superiority ("f'{superiority_max_die}'")") -1 ) if not failure else ' '}} {{ f'-d 1{superiority_max_die} ' if not failure else ' '}} {{f'-f "Quick Toss Success:"|"As a bonus action, you can expend one superiority die and make a ranged attack with a weapon that has the thrown property. You can draw the weapon as part of making this attack. If you hit, add the superiority die to the weapon\'s damage roll."' if not failure else f'-f "Quick Toss Failure:"|"Out of Charges"' }} -f "{{"Superiority ("f'{superiority_max_die}'")"}}|{{'◉'*get_cc("Superiority ("f'{superiority_max_die}'")") + '〇'*(get_cc_max("Superiority ("f'{superiority_max_die}'")")-get_cc("Superiority ("f'{superiority_max_die}'")"))}}"

#Use d6 sup die
!snippet qt6 {{ failure = False if (character().get_cc("Superiority (d6)") > 0) else True}} {{ character().set_cc("Superiority (d6)", character().get_cc("Superiority (d6)") -1 ) if not failure else ' '}} {{ f'-d 1{superiority_max_die} ' if not failure else ' '}} {{f'-f "Quick Toss Success:"|"As a bonus action, you can expend one superiority die and make a ranged attack with a weapon that has the thrown property. You can draw the weapon as part of making this attack. If you hit, add the superiority die to the weapon\'s damage roll."' if not failure else f'-f "Quick Toss Failure:"|"Out of Charges"' }} -f "{{"Superiority (d6)"}}|{{'◉'*get_cc("Superiority (d6)") + '〇'*(get_cc_max("Superiority (d6)")-get_cc("Superiority (d6)"))}}"









#####################################################################################################################
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
Adrian, ignore everything past this
#################################################################################################################














###
#Interception:
#
#Usage: !int -t {Party member that you are defending} -d {damage total of the last attack}
###

!alias int embed
<drac2>
args=argparse(&ARGS&)
target=combat().get_combatant(args.get('t')[0]).name if args.get('t') and combat() else "\u200b"
damage=int(args.get('d')[0]) if args.get('d') else 0
damageNull=vroll("1d10+"f'{proficiencyBonus}')
actualDamage=int(damageNull.total) if int(damageNull.total) <= damage else damage
if ((target) and (damage) and combat()):
  failure = False
else:
  failure = True
if not (failure):
  hp_mod=combat().get_combatant(target).hp + actualDamage
  hp_max=combat().get_combatant(target).max_hp
  if (hp_mod > hp_max):
    combat().get_combatant(target).reset_hp()
  else:
    combat().get_combatant(target).set_hp(hp_mod)
</drac2>
-title "{{ f'{character().name} uses a reaction to intercept the last attack' if not failure else f'{character().name} fails to intercept the attack'}}"
-desc "When a creature you can see hits a target, other than you, within 5 feet of you with an attack, you can use your reaction to reduce the damage the target takes by 1d10 + your proficiency bonus (to a minimum of 0 damage). You must be wielding a shield or a simple or martial weapon to use this reaction."
-f "Meta:"|"{{ damageNull.full }}"
-f "Target:"|"{{ target }}"
-f "Damage Nullified:"|"{{ actualDamage }}"
-f "Usage:"|"Only usable in combat. Both -t and -d arguments are required```!int -t target -d {damage of last attack}```"
-f "{{ character().name }} HP:"|"{{ character().hp_str() }}"
-footer "Source PHB"

###
#Protection:
#
#Usage: !prot

!alias prot embed
-title "f'{character().name} uses a reaction to provide Protection to an ally'"
-desc "When a creature you can see attacks a target other than you that is within 5 feet of you, you can use your reaction to impose disadvantage on the attack roll. You must be wielding a shield."


