##Author: Dave Smith 2021
#Ignore comment lines starting with # when copying code
#

###
#Setup Fighter counters. Run this initially, and again every time you level
###

!test <drac2>
if (FighterLevel < 17):
  character().create_cc("Action Surge",0,1,"short","bubble")
else:
  character().create_cc("Action Surge",0,2,"short","bubble")
character().create_cc("Superiority (d6)",0,1,"short","bubble")
if (character().cc_exists("Superiority (d8)")):
  character().delete_cc("Superiority (d8)")
if (character().cc_exists("Superiority (d10)")):
  character().delete_cc("Superiority (d10)")
if (character().cc_exists("Superiority (d12)")):
  character().delete_cc("Superiority (d12)")
if (FighterLevel < 10):
  num_of_dice = 4 if FighterLevel < 7 else 5
  character().set_cvar('superiority_max_die',"d8")
elif (FighterLevel < 18):
  num_of_dice = 5 if FighterLevel < 15 else 6
  character().set_cvar('superiority_max_die',"d10")
else:
  character().set_cvar(superiority_max_die,"d12")
character().create_cc("Superiority ("f'{superiority_max_die}'")",0,num_of_dice,"short","bubble")
character().create_cc("Second Wind",0,1,"short","bubble")
character().create_cc("Hit Dice (d10)",0,FighterLevel,"long","bubble")
</drac2>


###
#Interception:
#
#Usage: !int -t {Party member that you are defending} -d {damage total of the last attack}
###

!alias int embed
<drac2>
args=argparse(&ARGS&)
target=combat().get_combatant(args.get('t')[0]).name if args.get('t') and combat() else "\u200b"
damage=int(args.get('d')[0]) if args.get('d') else 0
damageNull=vroll("1d10+"f'{proficiencyBonus}')
actualDamage=int(damageNull.total) if int(damageNull.total) <= damage else damage
if ((target) and (damage) and combat()):
  failure = False
else:
  failure = True
if not (failure):
  hp_mod=combat().get_combatant(target).hp + actualDamage
  hp_max=combat().get_combatant(target).max_hp
  if (hp_mod > hp_max):
    combat().get_combatant(target).reset_hp()
  else:
    combat().get_combatant(target).set_hp(hp_mod)
</drac2>
-title "{{ f'{character().name} uses a reaction to intercept the last attack' if not failure else f'{character().name} fails to intercept the attack'}}"
-desc "When a creature you can see hits a target, other than you, within 5 feet of you with an attack, you can use your reaction to reduce the damage the target takes by 1d10 + your proficiency bonus (to a minimum of 0 damage). You must be wielding a shield or a simple or martial weapon to use this reaction."
-f "Meta:"|"{{ damageNull.full }}"
-f "Target:"|"{{ target }}"
-f "Damage Nullified:"|"{{ actualDamage }}"
-f "Usage:"|"Only usable in combat. Both -t and -d arguments are required```!int -t target -d {damage of last attack}```"
-footer "Source PHB"

###
#Parry:
#
#Usage: !parry -d {the amount of damage you are parrying(required)} -hd {die type to use (optional)}

!alias parry embed
<drac2>
args=argparse(&ARGS&)
damage=int(args.get('d')[0]) if args.get('d') else 0
die_type=args.get('hd')[0] if args.get('hd') else superiority_max_die
damageNull=vroll("1"f'{die_type}'"+"f'{dexterityMod}')
actualDamage=int(damageNull.total) if int(damageNull.total) <= damage else damage
if ((damage) and (character().get_cc("Superiority ("f'{die_type}'")") > 0)):
  failure = False
  character().set_cc("Superiority ("f'{die_type}'")", character().get_cc("Superiority ("f'{die_type}'")") - 1 ) 
else:
  failure = True
if not (failure):
  hp_mod=character().hp + actualDamage
  hp_max=character().max_hp
  if (hp_mod > hp_max):
    character().reset_hp()
  else:
    character().set_hp(hp_mod)
</drac2>
-title "{{ f'{character().name} uses Superiority to Parry the last attack' if not failure else f'{character().name} fails to intercept the attack'}}"
-desc "When another creature damages you with a melee attack, you can use your reaction and expend one superiority die to reduce the damage by the number you roll on your superiority die + your Dexterity modifier."
-f "Meta:"|"{{ damageNull.full }}"
-f "Damage Nullified:"|"{{ actualDamage }}"
-f "Usage:"|"-d argument is required```!parry -d [damage of last attack] -hd [die type to use (optional)]```"
-f "{{"Superiority ("f'{die_type}'")"}}|{{'◉'*get_cc("Superiority ("f'{die_type}'")") + '〇'*(get_cc_max("Superiority ("f'{die_type}'")")-get_cc("Superiority ("f'{die_type}'")"))}}"
-footer "Source PHB"

###
#Protection:
#
#Usage: !prot

!alias prot embed
-title "f'{character().name} uses a reaction to provide Protection to an ally'"
-desc "When a creature you can see attacks a target other than you that is within 5 feet of you, you can use your reaction to impose disadvantage on the attack roll. You must be wielding a shield."


###
#Evasive Footwork:
#
#Usage: !evade

!alias evade embed
-title "f'{character().name} uses a Evasive Footwork to move through the fray'"
-desc "When you move, you can expend one superiority die, rolling the die and adding the number rolled to your AC until you stop moving."



!alias ef embed 
<drac2>
args=argparse(&ARGS&)
damage=int(args.get('d')[0]) if args.get('d') else 0
die_type=args.get('hd')[0] if args.get('hd') else superiority_max_die
damageNull=vroll("1"f'{die_type}'")
if (character().get_cc("Superiority ("f'{die_type}'")") > 0):
  failure = False
  character().set_cc("Superiority ("f'{die_type}'")", character().get_cc("Superiority ("f'{die_type}'")") - 1 ) 
else:
  failure = True
  
</drac2>









!alias rtv embed
<drac2>
args=argparse(&ARGS&)
target=combat().get_combatant(args.get('t')[0]).name if args.get('t') and combat() else "\u200b"
damage=int(args.get('d')[0]) if args.get('d') else 0
savRoll="\u200b"
spellDC=8 + proficiencyBonus + charismaMod
adv=""
adv= False if args.get('adv') else adv
adv= True if args.get('dis') else adv
if ((target) and (damage)):
  failure = False
else:
  failure = True
if ((character().get_cc("Channel Divinity") > 0) and (combat() and not failure)):
  savRoll = combat().get_combatant(target).save("wisdom",adv)
  if (int(savRoll.total) >= spellDC):
    damage = floor(damage/2)
  combat().get_combatant(target).damage(f'{damage}')
  character().set_cc("Channel Divinity",(character().get_cc("Channel Divinity") - 1 ) )  
</drac2>
-title "{{ f'{character().name} uses a reaction to Rebuke the Violent' if not failure else f'{character().name} fails to Rebuke the Violent!' }}"
-desc "You can use your Channel Divinity to rebuke those who use violence. Immediately after an attacker within 30 feet of you deals damage with an attack against a creature other than you, you can use your reaction to force the attacker to make a Wisdom saving throw. On a failed save, the attacker takes radiant damage equal to the damage it just dealt. On a successful save, it takes half as much damage."
-f "Target"|"{{ target }}"
-f "spellDC"|"{{ spellDC }}"
-f "Saving throw (Wisdom)"|"{{savRoll}}"
-f "Damage:"|"{{ damage }}"
-f "Usage:"|"Only usable in combat. -t and -d args are critical, adv/dis argument is optional. damage should be the total damage of the attack you are reacting to.```!rtv -t target -d damage adv/dis```"
-f "{{"Channel Divinity"}}|{{'◉'*get_cc("Channel Divinity") + '〇'*(get_cc_max("Channel Divinity")-get_cc("Channel Divinity"))}}"
-footer "Source XGE"

















!test <drac2>
if character().cc_exists("Rage"):
  character().delete_cc("Rage")
if (level <= 2):
  character().create_cc("Rage",0,2,"long","bubble")
elif (level <= 5):
  character().create_cc("Rage",0,3,"long","bubble")
elif (level <= 11):
  character().create_cc("Rage",0,4,"long","bubble")
elif (level <= 16):
  character().create_cc("Rage",0,5,"long","bubble")
elif (level <= 20):
  character().create_cc("Rage",0,6,"long","bubble")
if (level <= 8):
  character().set_cvar("RageDamage",2)
elif (level <= 15):
  character().set_cvar("RageDamage",3)
else:
  character().set_cvar("RageDamage",4)  
</drac2>